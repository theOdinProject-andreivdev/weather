{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","theme","setTheme","validData","setValidData","placeholderCity","setPlaceholderCity","tempCity","setTempCity","city","setCity","country","main","description","temp","feels_like","temp_min","temp_max","pressure","humidity","icon","weather","setWeather","useEffect","storedCity","localStorage","getItem","setItem","updateCity","storageTheme","isInitialMount","useRef","current","fetch","then","response","json","parseAndSetWeather","catch","error","console","name","sys","className","type","placeholder","aria-label","aria-describedby","onChange","event","target","value","id","onClick","src","alt","style","width","Math","round","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.854cdbbb.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useRef, useState } from \"react\";\n\nconst API_KEY = \"04e0dee5fe194dcd20fb3d326d8e5a4d\";\n\nfunction App() {\n  const [theme, setTheme] = useState(\"\");\n  const [validData, setValidData] = useState(false);\n  const [placeholderCity, setPlaceholderCity] = useState(\"\");\n  const [tempCity, setTempCity] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState({\n    city: \"\",\n    country: \"\",\n    main: \"\",\n    description: \"\",\n    temp: 0,\n    feels_like: 0,\n    temp_min: 0,\n    temp_max: 0,\n    pressure: 0,\n    humidity: 0,\n    icon: \"\",\n  });\n\n  useEffect(() => {\n    let storedCity = localStorage.getItem(\"city\");\n    if (storedCity === null || storedCity === \"\") {\n      storedCity = \"London\";\n      localStorage.setItem(\"city\", storedCity);\n    }\n    updateCity(storedCity);\n\n    let storageTheme = localStorage.getItem(\"theme\");\n    if (storageTheme === null || storageTheme === \"\") {\n      storageTheme = \"bg-light text-dark\";\n      localStorage.setItem(\"theme\", storageTheme);\n    }\n    setTheme(storageTheme);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const switchThemeClick = () => {\n    if (theme === \"bg-light text-dark\") setTheme(\"bg-dark text-white\");\n    else setTheme(\"bg-light text-dark\");\n  };\n\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      fetch(\n        \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n          city +\n          \"&appid=\" +\n          API_KEY\n      )\n        .then(function (response) {\n          return response.json();\n        })\n        .then(function (response) {\n          setValidData(true);\n          parseAndSetWeather(response);\n        })\n        .catch((error) => {\n          setValidData(false);\n          console.error(\"Error:\", error);\n        });\n    }\n  }, [city]);\n\n  const handleTempCityChange = (event) => {\n    setTempCity(event.target.value);\n  };\n\n  const updateCity = (city) => {\n    localStorage.setItem(\"city\", city);\n    setPlaceholderCity(city);\n    setCity(city);\n  };\n\n  const updateCityWithTemp = () => {\n    localStorage.setItem(\"city\", tempCity);\n    setPlaceholderCity(tempCity);\n    setCity(tempCity);\n  };\n\n  const parseAndSetWeather = (response) => {\n    setWeather({\n      city: response.name,\n      country: response.sys.country,\n      main: response.weather[0].main,\n      description: response.weather[0].description,\n      temp: response.main.temp,\n      feels_like: response.main.feels_like,\n      temp_min: response.main.temp_min,\n      temp_max: response.main.temp_max,\n      pressure: response.main.pressure,\n      humidity: response.main.humidity,\n      icon:\n        \"http://openweathermap.org/img/wn/\" +\n        response.weather[0].icon +\n        \"@2x.png\",\n    });\n  };\n\n  return (\n    <div className={`App ${theme}`}>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-sm w-auto p-5\">\n            <div className=\"input-group mb-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder={placeholderCity}\n                aria-label=\"Location\"\n                aria-describedby=\"button-addon2\"\n                onChange={handleTempCityChange}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-outline-secondary\"\n                  type=\"button\"\n                  id=\"button-addon2\"\n                  onClick={updateCityWithTemp}\n                >\n                  Get Weather\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col\">\n            {validData && (\n              <div className={`card mb-3 ${theme}`}>\n                <img\n                  src={weather.icon}\n                  className=\"card-img-top mx-auto\"\n                  alt=\"...\"\n                  style={{ width: \"100px\" }}\n                />\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">\n                    Weather in {weather.city}, {weather.country}\n                  </h5>\n                  <p className=\"card-text\">\n                    Currently it feels like{\" \"}\n                    {Math.round(weather.feels_like - 273.15)}°C in{\" \"}\n                    {weather.city}\n                    <br />\n                    {weather.main} - {weather.description}\n                  </p>\n                  <div className=\"card-text\">\n                    <small className=\"text-muted\">\n                      <div className={`card ${theme}`}>\n                        <div className={`card-body ${theme}`}>\n                          Minimum temperature:{\" \"}\n                          {Math.round(weather.temp_min - 273.15)}°C\n                          <br />\n                          Maximum temperature:{\" \"}\n                          {Math.round(weather.temp_max - 273.15)}°C\n                          <br />\n                          Pressure: {weather.pressure}hPa\n                          <br />\n                          Humidity: {weather.humidity}%\n                          <br />\n                        </div>\n                      </div>\n                    </small>\n                  </div>\n                </div>\n              </div>\n            )}\n            {!validData && (\n              <div className=\"card mb-3\">\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">Please select a valid city</h5>\n                </div>\n              </div>\n            )}\n            <button\n              type=\"button\"\n              class=\"btn btn-secondary\"\n              onClick={switchThemeClick}\n            >\n              Switch theme\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}