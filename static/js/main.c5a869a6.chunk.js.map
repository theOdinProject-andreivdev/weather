{"version":3,"sources":["components/StandardWeather.js","components/TempGraph.js","App.js","reportWebVitals.js","index.js"],"names":["StandardWeather","props","className","theme","src","standardWeather","weather","icon","alt","style","width","name","sys","country","Math","round","main","feels_like","description","temp_min","temp_max","pressure","humidity","TempGraph","data","console","log","detailedWeather","hourly","slice","map","hour","push","Date","dt","getHours","getMinutes","temp","floor","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","fill","API_KEY","App","useState","setTheme","validStandardData","setValidStandardData","validDetailedData","setValidDetailedData","loaded","setLoaded","placeholderCity","setPlaceholderCity","tempCity","setTempCity","city","setCity","setStandardWeather","setDetailedWeather","useEffect","storedCity","localStorage","getItem","setItem","updateCity","storageTheme","isInitialMountCity","useRef","isInitialMountStandardWeather","isInitialMountDetailedWeather","current","fetch","then","response","json","catch","error","coord","lat","lon","placeholder","aria-label","aria-describedby","onChange","event","target","value","id","onClick","role","marginBottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5a869a6.chunk.js","sourcesContent":["function StandardWeather(props) {\n  return (\n    <div className={`card mb-3 ${props.theme}`}>\n      <img\n        src={\n          \"http://openweathermap.org/img/wn/\" +\n          props.standardWeather.weather[0].icon +\n          \"@2x.png\"\n        }\n        className=\"card-img-top mx-auto\"\n        alt=\"...\"\n        style={{ width: \"100px\" }}\n      />\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Weather in {props.standardWeather.name},{\" \"}\n          {props.standardWeather.sys.country}\n        </h5>\n        <p className=\"card-text\">\n          Currently it feels like{\" \"}\n          {Math.round(props.standardWeather.main.feels_like - 273.15)}°C in{\" \"}\n          {props.standardWeather.name}\n          <br />\n          {props.standardWeather.weather[0].main} -{\" \"}\n          {props.standardWeather.weather[0].description}\n        </p>\n        <div className=\"card-text\">\n          <small className=\"text-muted\">\n            <div className={`card ${props.theme}`}>\n              <div className={`card-body ${props.theme}`}>\n                Minimum temperature:{\" \"}\n                {Math.round(props.standardWeather.main.temp_min - 273.15)}°C\n                <br />\n                Maximum temperature:{\" \"}\n                {Math.round(props.standardWeather.main.temp_max - 273.15)}°C\n                <br />\n                Pressure: {props.standardWeather.main.pressure}hPa\n                <br />\n                Humidity: {props.standardWeather.main.humidity}%\n                <br />\n              </div>\n            </div>\n          </small>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default StandardWeather;\n","import {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n} from \"recharts\";\n\nfunction TempGraph(props) {\n  let data = [];\n\n  console.log(props);\n  props.detailedWeather.hourly.slice(0, 12).map((hour) => {\n    data.push({\n      name:\n        new Date(hour.dt * 1000).getHours() +\n        \":\" +\n        new Date(hour.dt * 1000).getMinutes() +\n        \"0\",\n      temp: Math.floor(hour.temp - 273),\n    });\n  });\n\n  return (\n    <div className=\"container mt-3\">\n      <div className=\"row\">\n        <div className=\"card-text col-12 mb-3\">\n          <small className=\"text-muted\">\n            <div className={`card ${props.theme}`}>\n              <div className={`card-body ${props.theme}`}>\n                <div style={{ width: \"100%\", height: \"30vh\" }}>\n                  <ResponsiveContainer>\n                    <AreaChart\n                      data={data}\n                      margin={{\n                        top: 0,\n                        right: 0,\n                        left: -40,\n                        bottom: 0,\n                      }}\n                    >\n                      <CartesianGrid strokeDasharray=\"2 2\" />\n                      <XAxis dataKey=\"name\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Area\n                        type=\"monotone\"\n                        dataKey=\"temp\"\n                        stroke=\"#8884d8\"\n                        fill=\"#8884d8\"\n                      />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n            </div>\n          </small>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TempGraph;\n","import \"./App.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport StandardWeather from \"./components/StandardWeather\";\n\nimport TempGraph from \"./components/TempGraph\";\n\nconst API_KEY = \"04e0dee5fe194dcd20fb3d326d8e5a4d\";\n\nfunction App() {\n  const [theme, setTheme] = useState(\"\");\n  const [validStandardData, setValidStandardData] = useState(false);\n  const [validDetailedData, setValidDetailedData] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const [placeholderCity, setPlaceholderCity] = useState(\"\");\n  const [tempCity, setTempCity] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [standardWeather, setStandardWeather] = useState();\n  const [detailedWeather, setDetailedWeather] = useState();\n\n  useEffect(() => {\n    let storedCity = localStorage.getItem(\"city\");\n    if (storedCity === null || storedCity === \"\") {\n      storedCity = \"London\";\n      localStorage.setItem(\"city\", storedCity);\n    }\n    updateCity(storedCity);\n\n    let storageTheme = localStorage.getItem(\"theme\");\n    if (storageTheme === null || storageTheme === \"\") {\n      storageTheme = \"bg-light text-dark\";\n      localStorage.setItem(\"theme\", storageTheme);\n    }\n    setTheme(storageTheme);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const switchThemeClick = () => {\n    if (theme === \"bg-light text-dark\") setTheme(\"bg-dark text-white\");\n    else setTheme(\"bg-light text-dark\");\n  };\n\n  const isInitialMountCity = useRef(true);\n  const isInitialMountStandardWeather = useRef(true);\n  const isInitialMountDetailedWeather = useRef(true);\n\n  const handleTempCityChange = (event) => {\n    setTempCity(event.target.value);\n  };\n\n  const updateCity = (city) => {\n    localStorage.setItem(\"city\", city);\n    setPlaceholderCity(city);\n    setCity(city);\n  };\n\n  const updateCityWithTemp = () => {\n    localStorage.setItem(\"city\", tempCity);\n    setPlaceholderCity(tempCity);\n    setCity(tempCity);\n  };\n\n  useEffect(() => {\n    if (isInitialMountCity.current) {\n      isInitialMountCity.current = false;\n    } else {\n      fetch(\n        \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n          city +\n          \"&appid=\" +\n          API_KEY\n      )\n        .then(function (response) {\n          return response.json();\n        })\n        .then(function (response) {\n          setStandardWeather(response);\n        })\n        .catch((error) => {\n          setValidStandardData(false);\n          setLoaded(false);\n          console.error(\"Error:\", error);\n        });\n    }\n  }, [city]);\n\n  useEffect(() => {\n    if (isInitialMountStandardWeather.current) {\n      isInitialMountStandardWeather.current = false;\n    } else {\n      setValidStandardData(true);\n      setLoaded(true);\n      fetch(\n        \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n          standardWeather.coord.lat +\n          \"&lon=\" +\n          standardWeather.coord.lon +\n          \"&exclude={part}&appid=\" +\n          API_KEY\n      )\n        .then(function (response) {\n          return response.json();\n        })\n        .then(function (response) {\n          setDetailedWeather(response);\n          setLoaded(true);\n        })\n        .catch((error) => {\n          setValidDetailedData(false);\n          setLoaded(false);\n          console.error(\"Error:\", error);\n        });\n    }\n  }, [standardWeather]);\n\n  useEffect(() => {\n    if (isInitialMountDetailedWeather.current) {\n      isInitialMountDetailedWeather.current = false;\n    } else {\n      setValidDetailedData(true);\n      console.log(detailedWeather);\n      setLoaded(true);\n    }\n  }, [detailedWeather]);\n\n  return (\n    <div className={`App ${theme}`}>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-sm w-auto p-5\">\n            <div className=\"input-group mb-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder={placeholderCity}\n                aria-label=\"Location\"\n                aria-describedby=\"button-addon2\"\n                onChange={handleTempCityChange}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-outline-secondary\"\n                  type=\"button\"\n                  id=\"button-addon2\"\n                  onClick={updateCityWithTemp}\n                >\n                  Get Weather\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col\">\n            {validStandardData && loaded && (\n              <StandardWeather\n                theme={theme}\n                standardWeather={standardWeather}\n              ></StandardWeather>\n            )}\n            {validDetailedData && (\n              <div>\n                Hourly temperature forecast\n                <TempGraph\n                  detailedWeather={detailedWeather}\n                  theme={theme}\n                ></TempGraph>\n              </div>\n            )}\n            {!validStandardData && (\n              <div className={`card mb-3 ${theme}`}>\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">Please select a valid city</h5>\n                </div>\n              </div>\n            )}\n            {!loaded && (\n              <div className={`card mb-3 ${theme}`}>\n                <div className=\"card-body\">\n                  <div className=\"spinner-grow\" role=\"status\" />\n                </div>\n              </div>\n            )}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              onClick={switchThemeClick}\n              style={{ marginBottom: \"30px\" }}\n            >\n              Switch theme\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}